import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class ItemsPage extends StatefulWidget {
  @override
  _ItemsPageState createState() => _ItemsPageState();
}

class _ItemsPageState extends State<ItemsPage> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  late User _user;
  int _userPoints = 0;
  List<Map<String, dynamic>> _items = [];

  @override
  void initState() {
    super.initState();
    _user = _auth.currentUser!;
    _loadUserData();
    _loadItems();
  }

  Future<void> _loadUserData() async {
  try {
    DocumentSnapshot<Map<String, dynamic>> userData =
        await _firestore.collection('users').doc(_user.uid).get();
    setState(() {
      _userPoints = userData.data()?['point'] ?? 0; // หมายเหตุ: 'point' คือชื่อฟิลด์ที่ถูกต้อง
    });
  } catch (e) {
    print("ไม่สามารถโหลดข้อมูลผู้ใช้: $e");
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('ไม่สามารถโหลดข้อมูลผู้ใช้ได้')),
    );
  }
}


  Future<void> _loadItems() async {
    try {
      QuerySnapshot<Map<String, dynamic>> itemsData =
          await _firestore.collection('items').get();
      setState(() {
        _items = itemsData.docs.map((doc) {
          final data = doc.data();
          final pointsRequired = data['pointsRequired'] is int
              ? data['pointsRequired'] as int
              : (data['pointsRequired'] is double
                  ? (data['pointsRequired'] as double).toInt()
                  : 0);

          return {
            ...data,
            'pointsRequired': pointsRequired,
            'id': doc.id,
          };
        }).toList();
      });
    } catch (e) {
      print("ไม่สามารถโหลดรายการสินค้า: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('ไม่สามารถโหลดรายการสินค้าทั้งหมดได้')),
      );
    }
  }

  Future<void> _redeemItem(String itemId, int pointsRequired) async {
  if (_userPoints < pointsRequired) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('แต้มไม่เพียงพอ')),
    );
    return;
  }

  try {
    await _firestore.collection('users').doc(_user.uid).update({
      'point': FieldValue.increment(-pointsRequired), // เปลี่ยนจาก 'points' เป็น 'point'
    });

    await _firestore.collection('user_items').add({
      'userId': _user.uid,
      'itemId': itemId,
      'timestamp': FieldValue.serverTimestamp(),
    });

    await _loadUserData(); // โหลดแต้มใหม่หลังจากแลกสินค้า

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
          content: Text('แลกสินค้าสำเร็จ! แต้มที่เหลืออยู่: $_userPoints')),
    );
  } catch (e) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('เกิดข้อผิดพลาด: $e')),
    );
  }
}


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('แลกสินค้า'),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Center(
              child: Text('แต้มคงเหลือ: $_userPoints',
                  style: TextStyle(fontSize: 16)),
            ),
          ),
        ],
      ),
      body: _items.isEmpty
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: _items.length,
              itemBuilder: (context, index) {
                final item = _items[index];
                final pointsRequired = item['pointsRequired'];

                return ListTile(
                  leading: item['imageUrl'] != null
                      ? Image.network(
                          item['imageUrl'],
                          width: 50,
                          height: 50,
                          fit: BoxFit.cover,
                          errorBuilder: (context, error, stackTrace) {
                            return Icon(Icons.error, size: 50);
                          },
                        )
                      : Icon(Icons.image, size: 50),
                  title: Text(item['name'] ?? 'ไม่มีชื่อ'),
                  subtitle: Text('แต้มที่ต้องการ: $pointsRequired'),
                  trailing: ElevatedButton(
                    onPressed: () =>
                        _redeemItem(item['id'] ?? '', pointsRequired),
                    child: Text('แลก'),
                  ),
                );
              },
            ),
    );
  }
}
