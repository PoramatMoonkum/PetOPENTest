import 'dart:io';

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:image_picker/image_picker.dart';
import 'package:pettakecare/view/main_tabview/main_tabview.dart';
import 'package:pettakecare/view/profile/PetSitter_page.dart';
import 'package:quickalert/quickalert.dart';

// คลาส ProfileView ใช้ในการแสดงและจัดการข้อมูลโปรไฟล์ของผู้ใช้
class ProfileView extends StatefulWidget {
  const ProfileView({Key? key}) : super(key: key);

  @override
  State<ProfileView> createState() => _ProfileViewState();
}

// สถานะของ ProfileView
class _ProfileViewState extends State<ProfileView> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final ImagePicker _picker = ImagePicker();

  late User _user;
  int _point = 0;
  bool _isEditable = false;
  bool _isActive = false; // เพิ่มบรรทัดนี้
  XFile? _image;
  TextEditingController _nameController = TextEditingController();
  TextEditingController _mobileController = TextEditingController();
  TextEditingController _addressController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _user = _auth.currentUser!;
    _loadUserData();
  }

  void _loadUserData() async {
    DocumentSnapshot<Map<String, dynamic>> userData =
        await _firestore.collection('users').doc(_user.uid).get();
    setState(() {
      _nameController.text = userData.data()!['name'];
      _mobileController.text = userData.data()!['mobile'];
      _addressController.text = userData.data()!['address'];
      _point = userData.data()!['point'] ?? 0;
      _isActive = userData.data()!['active'] ?? false; // โหลดสถานะ active
    });
  }

  Future<void> _updateUserData() async {
    if (!_isActive) return; // ทำการอัปเดตไม่ได้หากไม่ใช้งาน

    await _firestore.collection('users').doc(_user.uid).update({
      'name': _nameController.text,
      'mobile': _mobileController.text,
      'address': _addressController.text,
    });
  }

  Future<void> _updateProfilePicture() async {
    XFile? image = await _picker.pickImage(source: ImageSource.gallery);
    if (image != null) {
      setState(() {
        _image = image;
      });
      // อัปโหลดภาพไปยัง Firebase Storage
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Profile'),
        backgroundColor: Color(0xffFC6011),
        actions: [
          IconButton(
            onPressed: () async {
              await _auth.signOut();
              // เปลี่ยนเส้นทางไปยังหน้าจอล็อกอิน
            },
            icon: Icon(Icons.logout),
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            GestureDetector(
              onTap: _updateProfilePicture,
              child: CircleAvatar(
                radius: 50,
                backgroundImage: _image != null
                    ? FileImage(File(_image!.path))
                    : null,
                child: _image == null
                    ? Icon(Icons.person, size: 50)
                    : null,
              ),
            ),
            SizedBox(height: 16.0),
            Center(child: Text('แต้มสะสม: ' + _point.toString())),
            
            // แสดงสถานะ active
            SizedBox(height: 16.0),
            Center(
              child: Text(
                _isActive ? 'ยืนยันเรียบร้อย' : 'รอยืนยัน',
                style: TextStyle(
                  color: _isActive ? Colors.green : Colors.red,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            
            TextField(
              controller: _nameController,
              decoration: InputDecoration(labelText: 'Name'),
              readOnly: !_isEditable,
            ),
            TextField(
              controller: TextEditingController(text: _user.email),
              decoration: InputDecoration(labelText: 'Email'),
              readOnly: true,
            ),
            TextField(
              controller: _mobileController,
              decoration: InputDecoration(labelText: 'Mobile'),
              readOnly: !_isEditable,
            ),
            TextField(
              controller: _addressController,
              decoration: InputDecoration(labelText: 'Address'),
              readOnly: !_isEditable,
            ),
            SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: _isActive ? () async {
                await _updateUserData();
                QuickAlert.show(
                  context: context,
                  type: QuickAlertType.success,
                  text: 'แก้ไขสำเร็จ!',
                );
              } : null,
              child: Text('Save'),
              style: ElevatedButton.styleFrom(
                foregroundColor: Color(0xffFC6011),
              ),
            ),
            ElevatedButton(
              onPressed: _isActive ? () {
                setState(() {
                  _isEditable = !_isEditable;
                });
              } : null,
              child: Text(_isEditable ? 'Cancel Edit' : 'Edit Profile'),
              style: ElevatedButton.styleFrom(
                foregroundColor: Color(0xffFC6011),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
