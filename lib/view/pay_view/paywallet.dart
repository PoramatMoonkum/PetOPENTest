import 'dart:async';
import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:pettakecare/view/card/rating.dart';
import 'package:quickalert/quickalert.dart';

enum Payment { wallet, rabbit_linepay }

class PaymentPage extends StatefulWidget {
  const PaymentPage({super.key, required this.bookId});
  final String? bookId;

  @override
  State<PaymentPage> createState() => _PaymentViewState();
}

class _PaymentViewState extends State<PaymentPage> {
  final books = FirebaseFirestore.instance.collection('books');
  final users = FirebaseFirestore.instance.collection('users');
  final payments = FirebaseFirestore.instance.collection('payments');
  final notifications = FirebaseFirestore.instance.collection('notifications');

  Timer? timer;
  Payment? _payment = Payment.wallet;

  @override
  void dispose() {
    timer?.cancel();
    super.dispose();
  }

  void _setPayment(Payment? value) {
    setState(() {
      _payment = value;
    });
  }

  Future<void> _generatePayment(int amount) async {
    final user = FirebaseAuth.instance.currentUser!;
    final userDoc = users.doc(user.uid);
    final userData = await userDoc.get();

    if (userData.exists) {
      final currentBalance = userData.data()?['balance'] ?? 0;

      if (currentBalance < amount) {
        QuickAlert.show(
          context: context,
          type: QuickAlertType.error,
          text: 'ยอดเงินในกระเป๋าของคุณไม่เพียงพอ',
          title: 'การชำระเงินล้มเหลว',
        );
        return;
      }

      await userDoc.update({
        'balance': FieldValue.increment(-amount),
      });

      final payment = await payments.add({
        'book_id': widget.bookId,
        'amount': amount,
      });

      final bookDoc = books.doc(widget.bookId);
      await bookDoc.update({'status': 'paid', 'payment_id': payment.id});

      final book = await bookDoc.get();
      await notifications.add({
        'image': book.get('pet_image'),
        'extras': {'book_id': widget.bookId},
        'title': 'งานที่รับ',
        'message': 'กดจบงาน!',
        'type': 'job',
        'read': false,
        'user_id': book.get('sitter_id'),
      });

      QuickAlert.show(
        context: context,
        type: QuickAlertType.success,
        text: 'สำเร็จ!',
        title: 'การชำระเงินของคุณเสร็จสมบูรณ์',
        onConfirmBtnTap: () {
          Navigator.pushAndRemoveUntil(
            context,
            MaterialPageRoute(
              builder: (BuildContext context) => CustomRatingBottomSheet(
                petSitterId: book.get('sitter_id'),
              ),
            ),
            (route) => route.isFirst,
          );
        },
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Payment"),
        leading: BackButton(),
        backgroundColor: Colors.orange,
        foregroundColor: Colors.white,
        elevation: 0,
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        child: FutureBuilder<DocumentSnapshot>(
          future: books.doc(widget.bookId).get(),
          builder: (context, snapshot) {
            if (snapshot.hasError) {
              log(snapshot.error.toString());
            }
            if (snapshot.hasData) {
              final book = snapshot.data;

              final sitterRef = book!.get('sitter') as DocumentReference?;

              return Column(
                children: [
                  FutureBuilder<DocumentSnapshot>(
                    future: sitterRef?.get(),
                    builder: (context, snapshot) {
                      if (snapshot.hasError) {
                        // log(snapshot.error.toString());
                      }
                      if (snapshot.connectionState == ConnectionState.done) {
                        final sitter = snapshot.data?.data() as Map;

                        return Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Padding(
                              padding: const EdgeInsets.only(left: 20, right: 20),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  const Text(
                                    'ผู้รับฝาก',
                                    style: TextStyle(fontSize: 20),
                                  ),
                                  Row(
                                    children: [
                                      ClipRRect(
                                        borderRadius: BorderRadius.circular(40),
                                        child: Container(
                                          width: 80,
                                          height: 80,
                                          color: Colors.blueGrey,
                                          child: sitter.containsKey('image')
                                              ? Image.network(
                                                  sitter['image'] ?? '',
                                                  width: 120,
                                                  height: 80,
                                                  errorBuilder: (context, error, stackTrace) {
                                                    return Image.asset(
                                                      'assets/img/app_logo.png',
                                                      width: 120,
                                                      height: 80,
                                                    );
                                                  },
                                                )
                                              : Image.asset(
                                                  'assets/img/app_logo.png',
                                                  width: 120,
                                                  height: 80,
                                                ),
                                        ),
                                      ),
                                      Column(
                                        children: [
                                          ElevatedButton(
                                            onPressed: () {},
                                            style: ButtonStyle(
                                              side: MaterialStateProperty.all<BorderSide>(
                                                const BorderSide(color: Colors.orange, width: 2.0),
                                              ),
                                            ),
                                            child: const Text(
                                              'ดูโปรไฟล์',
                                              style: TextStyle(color: Colors.orange),
                                            ),
                                          ),
                                        ],
                                      )
                                    ],
                                  ),
                                ],
                              ),
                            ),
                            const Divider(),
                            Padding(
                              padding: const EdgeInsets.only(left: 20, right: 20),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: <Widget>[
                                  const Text(
                                    'ที่อยู่',
                                    style: TextStyle(fontSize: 20),
                                  ),
                                  Text(sitter.containsKey('address') ? sitter['address'] : ''),
                                ],
                              ),
                            ),
                            const Divider(),
                            const Padding(
                              padding: EdgeInsets.only(left: 20, right: 20),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'สัตว์เลี้ยง',
                                    style: TextStyle(fontSize: 20),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        );
                      }
                      return Container();
                    },
                  ),
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      book.get('pet_image').startsWith('http')
                          ? Image.network(
                              book.get('pet_image') ?? '',
                              width: 120,
                              height: 80,
                              errorBuilder: (context, error, stackTrace) {
                                return Image.asset(
                                  'assets/img/app_logo.png',
                                  width: 120,
                                  height: 80,
                                );
                              },
                            )
                          : Image.asset(
                              'assets/img/app_logo.png',
                              width: 120,
                              height: 80,
                            ),
                      Text(
                        (book.get('pets') ?? 0).toString(),
                        style: const TextStyle(fontSize: 20),
                      ),
                    ],
                  ),
                  const Divider(),
                  RadioListTile<Payment>(
                    title: const Text('Wallet'),
                    value: Payment.wallet,
                    groupValue: _payment,
                    onChanged: _setPayment,
                  ),
                  RadioListTile<Payment>(
                    title: const Text('Rabbit Line Pay'),
                    value: Payment.rabbit_linepay,
                    groupValue: _payment,
                    onChanged: _setPayment,
                  ),
                  Center(
                    child: Padding(
                      padding: const EdgeInsets.all(20),
                      child: ElevatedButton(
                        onPressed: () async {
                          final numberOfPets = book.get('pets') ?? 0;
                          final amount = numberOfPets * 45; // คำนวณค่าธรรมเนียม 45 THB ต่อสัตว์เลี้ยง
                          if (_payment == Payment.wallet) {
                            await _generatePayment(amount);
                          } else {
                            // Handle Rabbit Line Pay (if implemented)
                          }
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange,
                          padding: const EdgeInsets.all(20),
                        ),
                        child: const Text('ชำระเงิน'),
                      ),
                    ),
                  ),
                ],
              );
            }
            return Container(); // คืนค่า Container ว่างหากยังไม่เสร็จ
          },
        ),
      ),
    );
  }
}
