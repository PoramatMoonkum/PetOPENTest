import 'dart:developer'; 
import 'dart:io'; // ใช้สำหรับการจัดการไฟล์
import 'package:cloud_firestore/cloud_firestore.dart'; 
import 'package:collection/collection.dart';
import 'package:firebase_auth/firebase_auth.dart'; 
import 'package:flutter/material.dart';
import 'package:chat_bubbles/chat_bubbles.dart';
import 'package:image_picker/image_picker.dart'; // ใช้สำหรับการเลือกภาพจาก gallery
import 'package:firebase_storage/firebase_storage.dart'; // ใช้สำหรับการอัปโหลดรูปภาพไปยัง Firebase Storage

class ChatView extends StatefulWidget {
  const ChatView({super.key, required this.chatId});

  final String chatId;

  @override
  _ChatViewState createState() => _ChatViewState();
}

class _ChatViewState extends State<ChatView> {
  final chats = FirebaseFirestore.instance.collection('chats');
  final ImagePicker _picker = ImagePicker(); // ตัวเลือกภาพจาก gallery

  Future<void> _sendMessage(String message, {String? imageUrl}) async {
    final chatDoc = chats.doc(widget.chatId);
    final user = FirebaseAuth.instance.currentUser;

    try {
      await chatDoc.update({
        'chats': FieldValue.arrayUnion([
          {
            'message': message,
            'imageUrl': imageUrl, // เพิ่ม field สำหรับ URL รูปภาพ
            'timestamp': DateTime.now(),
            'sender': user?.uid
          }
        ])
      });
    } catch (e) {
      log('Error sending message: $e');
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('ไม่สามารถส่งข้อความได้ขณะนี้')));
    }
  }

  Future<void> _sendImage() async {
    final user = FirebaseAuth.instance.currentUser;
    final chatDoc = chats.doc(widget.chatId);
    
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery); // เลือกรูปภาพจาก gallery

    if (pickedFile != null) {
      final file = File(pickedFile.path);
      final fileName = '${DateTime.now().millisecondsSinceEpoch}.jpg';
      final storageRef = FirebaseStorage.instance
          .ref()
          .child('chat_images/${user?.uid}/$fileName');
      
      try {
        final uploadTask = await storageRef.putFile(file);
        final imageUrl = await uploadTask.ref.getDownloadURL();
        
        await _sendMessage('', imageUrl: imageUrl); // ส่งข้อความพร้อม URL รูปภาพ
      } catch (e) {
        log('Error uploading image: $e');
        ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('ไม่สามารถอัปโหลดรูปภาพได้ขณะนี้')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Chat"),
        leading: const BackButton(),
        backgroundColor: const Color(0xffFC6011),
        foregroundColor: Colors.white,
        elevation: 0,
        centerTitle: true,
        actions: [
          IconButton(
            icon: Icon(Icons.photo),
            onPressed: _sendImage, // เพิ่มปุ่มสำหรับเลือกและส่งรูปภาพ
          ),
        ],
      ),
      body: Stack(
        children: [
          SingleChildScrollView(
            padding: const EdgeInsets.only(top: 10, bottom: 10),
            child: StreamBuilder<DocumentSnapshot>(
              stream: chats.doc(widget.chatId).snapshots(),
              builder: (context, snapshot) {
                if (snapshot.hasError) {
                  return const Text('Something went wrong');
                }

                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Text("Loading");
                }

                final data = snapshot.data?.data() as Map<String, dynamic>?;
                List chatList = [];
                if (data != null && data.containsKey('chats')) {
                  chatList = data['chats'];
                }

                List<Widget> chatListGroup = [];
                var groupByDate = groupBy(chatList, (obj) {
                  return obj['timestamp']
                      .toDate()
                      .toIso8601String()
                      .split('T')[0];
                });

                final uid = FirebaseAuth.instance.currentUser?.uid;

                groupByDate.forEach((date, list) {
                  DateTime dateParsed = DateTime.parse(date);
                  chatListGroup.add(DateChip(date: dateParsed));

                  list.forEach((e) {
                    if (e['imageUrl'] != null) {
                      chatListGroup.add(BubbleNormalImage(
                        id: 'image',
                        image: Image.network(
                          e['imageUrl'],
                          errorBuilder: (context, error, stackTrace) {
                            return const Icon(Icons.broken_image);
                          },
                        ),
                        isSender: e['sender'] == uid,
                        color: e['sender'] != uid
                            ? const Color(0xFF1B97F3)
                            : Colors.grey,
                      ));
                    } else {
                      chatListGroup.add(BubbleNormal(
                        text: e['message'],
                        isSender: e['sender'] == uid,
                        color: e['sender'] != uid
                            ? const Color(0xFF1B97F3)
                            : Colors.grey,
                        tail: true,
                        textStyle: TextStyle(
                            color: e['sender'] != uid
                                ? Colors.white
                                : const Color.fromARGB(255, 16, 12, 12),
                            fontSize: 18),
                      ));
                    }
                  });
                });

                return Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: chatListGroup,
                );
              },
            ),
          ),
          MessageBar(
            onSend: (message) => _sendMessage(message),
          ),
        ],
      ),
    );
  }
}
